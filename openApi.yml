openapi: 3.0.3
info:
  title: Tickets API
  version: 1.0.0
  description: >
    REST API для управления билетами, людьми, событиями и площадками.
    Некоторые эндпоинты возвращают SSE (Server-Sent Events).

servers:
  - url: /

paths:
  /tickets/stream:
    get:
      summary: Подписка на события (SSE)
      description: Поток серверных событий об изменениях сущностей.
      operationId: streamTickets
      responses:
        "200":
          description: text/event-stream
          content:
            text/event-stream:
              schema:
                type: string
                example: "event: change\ndata: {\"type\":\"add\",\"id\":123}\n\n"

  /get_tickets:
    get:
      summary: Получить список билетов
      operationId: getTickets
      responses:
        "200":
          description: Успех
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketsEnvelope"

  /add_ticket:
    post:
      summary: Создать билет
      operationId: addTicket
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Ticket" }
      responses:
        "200":
          description: Создано
          content:
            application/json:
              schema: { $ref: "#/components/schemas/StatusResponse" }
        "400":
          description: Ошибка валидации/создания
          content:
            application/json:
              schema: { $ref: "#/components/schemas/StatusResponse" }

  /get_ticket/{id}:
    get:
      summary: Получить билет по ID
      operationId: getTicketById
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int32 }
      responses:
        "200":
          description: Найдено
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Ticket" }
        "400":
          description: Билет не найден
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponseDto" }

  /update_ticket/{id}:
    post:
      summary: Обновить билет по ID
      operationId: updateTicket
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int32 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Ticket" }
      responses:
        "200": { description: Обновлено }
        "400":
          description: Не найдено/ошибка
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponseDto" }

  /delete_ticket/{id}:
    delete:
      summary: Удалить билет по ID
      operationId: deleteTicket
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int32 }
      responses:
        "200": { description: Удалено }
        "400":
          description: Не найдено/ошибка
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponseDto" }

  /delete_by_comment:
    delete:
      summary: Массовое удаление билетов по точному совпадению comment
      operationId: deleteByComment
      parameters:
        - in: query
          name: commentEq
          required: true
          schema: { type: string }
      responses:
        "200": { description: Удалено }
        "400":
          description: Ничего не найдено/ошибка
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponseDto" }

  /min_event_ticket:
    get:
      summary: Билет с минимальным ID события
      operationId: minEventTicket
      responses:
        "200":
          description: Найдено
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Ticket" }
        "400":
          description: Не найдено
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponseDto" }

  /count_comment_less:
    get:
      summary: Подсчёт билетов с comment лексикографически меньше данного
      operationId: countCommentLess
      parameters:
        - in: query
          name: comment
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Количество
          content:
            application/json:
              schema: { $ref: "#/components/schemas/CountResponse" }

  /sell_ticket:
    post:
      summary: Продать билет пользователю
      operationId: sellTicket
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/SellRequestDTO" }
      responses:
        "200":
          description: Успех
          content:
            application/json:
              schema: { $ref: "#/components/schemas/StatusResponse" }
        "400":
          description: Ошибка
          content:
            application/json:
              schema: { $ref: "#/components/schemas/StatusResponse" }

  /clone_vip:
    post:
      summary: Клонировать билет как VIP (цена * 2)
      operationId: cloneVip
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CloneRequest" }
      responses:
        "200":
          description: Копия создана
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Ticket" }
        "400":
          description: Не найден исходный билет/ошибка
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponseDto" }

  /get_events:
    get:
      summary: Получить список событий
      operationId: getEvents
      responses:
        "200":
          description: Успех
          content:
            application/json:
              schema: { $ref: "#/components/schemas/EventsEnvelope" }

  /add_event:
    post:
      summary: Создать событие
      operationId: addEvent
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Event" }
      responses:
        "200":
          description: Создано
          content:
            application/json:
              schema: { $ref: "#/components/schemas/StatusResponse" }
        "400":
          description: Ошибка
          content:
            application/json:
              schema: { $ref: "#/components/schemas/StatusResponse" }

  /get_persons:
    get:
      summary: Получить список людей
      operationId: getPersons
      responses:
        "200":
          description: Успех
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PersonsEnvelope" }

  /add_person:
    post:
      summary: Создать человека
      operationId: addPerson
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Person" }
      responses:
        "200":
          description: Создано
          content:
            application/json:
              schema: { $ref: "#/components/schemas/StatusResponse" }
        "400":
          description: Ошибка
          content:
            application/json:
              schema: { $ref: "#/components/schemas/StatusResponse" }

  /get_venues:
    get:
      summary: Получить список площадок
      operationId: getVenues
      responses:
        "200":
          description: Успех
          content:
            application/json:
              schema: { $ref: "#/components/schemas/VenuesEnvelope" }

  /add_venue:
    post:
      summary: Создать площадку
      operationId: addVenue
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Venue" }
      responses:
        "200":
          description: Создано
          content:
            application/json:
              schema: { $ref: "#/components/schemas/StatusResponse" }
        "400":
          description: Ошибка
          content:
            application/json:
              schema: { $ref: "#/components/schemas/StatusResponse" }

components:
  schemas:
    StatusResponse:
      type: object
      properties:
        status:
          type: boolean
      required: [status]

    CountResponse:
      type: object
      properties:
        count:
          type: integer
          format: int64
      required: [count]

    ErrorResponseDto:
      type: object
      properties:
        title:
          type: string
          example: Возникла ошибка
        errorMessage:
          type: string
          example: Ошибка при удалении объекта, возможно его не существует
      required: [title, errorMessage]

    TicketsEnvelope:
      type: object
      properties:
        tickets:
          type: array
          items: { $ref: "#/components/schemas/Ticket" }
      required: [tickets]

    EventsEnvelope:
      type: object
      properties:
        events:
          type: array
          items: { $ref: "#/components/schemas/Event" }
      required: [events]

    PersonsEnvelope:
      type: object
      properties:
        persons:
          type: array
          items: { $ref: "#/components/schemas/Person" }
      required: [persons]

    VenuesEnvelope:
      type: object
      properties:
        venues:
          type: array
          items: { $ref: "#/components/schemas/Venue" }
      required: [venues]

    CloneRequest:
      type: object
      properties:
        ticketId:
          type: integer
          format: int32
      required: [ticketId]

    SellRequestDTO:
      type: object
      properties:
        ticketId:
          type: integer
          format: int32
        personId:
          type: integer
          format: int32
        amount:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
      required: [ticketId, personId, amount]

    Ticket:
      type: object
      properties:
        id: { type: integer, format: int32, nullable: true }
        name: { type: string }
        price: { type: number, format: float }
        type:
          type: string
          enum: [VIP, USUAL, BUDGETARY, CHEAP]
        number: { type: integer, format: int32 }
        discount: { type: number, format: float, nullable: true }
        comment: { type: string, nullable: true }
        creationDate: { type: string, format: date-time, nullable: true }
        coordinates: { $ref: "#/components/schemas/Coordinates" }
        person: { $ref: "#/components/schemas/Person", nullable: true }
        event: { $ref: "#/components/schemas/Event", nullable: true }
        venue: { $ref: "#/components/schemas/Venue", nullable: true }
      required: [name, price, type, number, coordinates]

    Coordinates:
      type: object
      properties:
        x: { type: integer, format: int32 }
        y: { type: number, format: float }
      required: [x, y]

    Person:
      type: object
      properties:
        id: { type: integer, format: int32, nullable: true }
        passportID: { type: string, nullable: true }
        weight: { type: number, format: float, nullable: true }
        nationality: { type: string, nullable: true }
        hairColor:
          type: string
          nullable: true
          description: Перечисление, если задано в модели
        eyeColor:
          type: string
          nullable: true
        location:
          type: object
          nullable: true
          properties:
            x: { type: integer, format: int32 }
            y: { type: number, format: float }
            z: { type: number, format: float }
          required: [x, y, z]

    Event:
      type: object
      properties:
        id: { type: integer, format: int32, nullable: true }
        name: { type: string }
        ticketsCount: { type: integer, format: int32, nullable: true }
        eventType: { type: string, nullable: true }
        date: { type: string, format: date-time, nullable: true }

    Venue:
      type: object
      properties:
        id: { type: integer, format: int32, nullable: true }
        name: { type: string }
        capacity: { type: integer, format: int32, nullable: true }
        type: { type: string, nullable: true }
